;;; This file was generated automatically from Acrobat Pro's SDK headers.

(in-package :pdf-plugin-tools) 

;; #include <PEExpT.h>
;; line 46
(define-c-typedef pex1 ac-cb1)
;; line 47
(define-c-typedef pex2 ac-cb2)
;; line 105
(define-opaque-pointer pd-eobject -t-pdeobject)
;; line 119
(define-opaque-pointer pd-econtent -t-pdecontent)
;; line 140
(define-opaque-pointer pd-eelement -t-pdeelement)
;; line 163
(define-opaque-pointer pd-etext -t-pdetext)
;; line 171
(define-opaque-pointer pd-epath -t-pdepath)
;; line 180
(define-opaque-pointer pd-eimage -t-pdeimage)
;; line 199
(define-opaque-pointer pd-eform -t-pdeform)
;; line 207
(define-opaque-pointer pd-eps -t-pdeps)
;; line 214
(define-opaque-pointer pd-exobject -t-pdexobject)
;; line 229
(define-opaque-pointer pd-eplace -t-pdeplace)
;; line 234
(define-opaque-pointer pd-eunknown -t-pdeunknown)
;; line 245
(define-opaque-pointer pd-econtainer -t-pdecontainer)
;; line 254
(define-opaque-pointer pd-egroup -t-pdegroup)
;; line 262
(define-opaque-pointer pd-eshading -t-pdeshading)
;; line 270
(define-opaque-pointer pd-ebegin-container -t-pdebegin-container)
;; line 278
(define-opaque-pointer pd-eend-container -t-pdeend-container)
;; line 285
(define-opaque-pointer pd-ebegin-group -t-pdebegin-group)
;; line 292
(define-opaque-pointer pd-eend-group -t-pdeend-group)
;; line 310
(define-opaque-pointer pd-efont -t-pdefont)
;; line 321
(define-opaque-pointer pd-ecolor-space -t-pdecolor-space)
;; line 339
(define-opaque-pointer pd-eclip -t-pdeclip)
;; line 347
(define-opaque-pointer pd-eext-gstate -t-pdeext-gstate)
;; line 355
(define-opaque-pointer pd-epattern -t-pdepattern)
;; line 362
(define-opaque-pointer pd-edevice-ncolors -t-pdedevice-ncolors)
;; line 367
(define-opaque-pointer pd-estate -t-pdestate)
;; line 372
(define-opaque-pointer pd-eemit-state-p -t-pdeemit-state)
;; line 382
(define-opaque-pointer pd-esoft-mask -t-pdesoft-mask)
;; line 391
(define-opaque-pointer pd-exgroup -t-pdexgroup)
;; line 396
(define-opaque-pointer pd-ereader -t-pdereader)
;; line 401
(define-opaque-pointer pd-ewriter -t-pdewriter)
;; line 410
(define-opaque-pointer pd-sys-encoding -t-pdsys-encoding)
;; line 415
(define-opaque-pointer pd-edoc -t-pdedoc)
;; line 420
(define-opaque-pointer pd-epage -t-pdepage)
;; line 425
(define-opaque-pointer pd-etext-item -t-pdetext-item)
;; line 429
(define-opaque-pointer pd-eimage-flate -t-pdeimage-flate)
;; line 434
(define-opaque-pointer pd-eimage-jpx -t-pdeimage-jpx)
;; line 439
(define-opaque-pointer jpxcolor-space -t-jpxcolor-space)
;; line 444
(define-opaque-pointer jpxpalette -t-jpxpalette)
;; line 448
(define-opaque-pointer pd-esvgcontent -t-pdesvgcontent)
;; line 1952
(define-c-typedef pd-ewhite-point-flt pd-exyzcolor-flt)
;; line 1958
(define-c-typedef pd-eblack-point-flt pd-exyzcolor-flt)
;; line 2038
(define-c-typedef pd-epattern-color-space pd-ecolor-space)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefill-cspace-was-set+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefill-cvalue-was-set+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdestroke-cspace-was-set+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdestroke-cvalue-was-set+ 8))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdedash-was-set+ 16))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeline-width-was-set+ 32))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdemiter-limit-was-set+ 64))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeflatness-was-set+ 128))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeline-cap-was-set+ 256))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeline-join-was-set+ 512))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pderender-intent-was-set+ 1024))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeext-gstate-was-set+ 2048))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdesoft-mask-matrix-was-set+ 4096))
(define-c-typedef pd-egraphic-state-was-set-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdechar-spacing-was-set+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeword-spacing-was-set+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pderender-mode-was-set+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-size-was-set+ 8))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdehscale-was-set+ 16))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-rise-was-set+ 32))
(define-c-typedef pd-etext-state-was-set-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent+ 0))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdepath+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage+ 3))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeform+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeps+ 5))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdexobject+ 6))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeclip+ 7))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont+ 8))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecolor-space+ 9))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeext-gstate+ 10))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeplace+ 11))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontainer+ 12))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font+ 13))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdepattern+ 14))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdedevice-ncolors+ 15))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeshading+ 16))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdegroup+ 17))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeunknown+ 18))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdebegin-container+ 19))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeend-container+ 20))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdebegin-group+ 21))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeend-group+ 22))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdexgroup+ 23))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdesoft-mask+ 24))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-encoding+ 25))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdedoc+ 26))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdepage+ 27))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdereader+ 28))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdewriter+ 29))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-item+ 30))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-flate+ 31))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-jpx+ 32))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-jpxcolor-space+ 33))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-jpxpalette+ 34))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdesvgcontent+ 35))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdelast-type+ 36))
(define-c-typedef pd-etype :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-to-page+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-to-form+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-to-char-proc+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-rev1compat+ 8))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-do-not-resolve-forms+ 16))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-do-not-resolve-type3+ 32))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +dictionary+ 33))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-emit-default-rgband-gray+ 64))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-inherit-state+ 128))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-do-not-emit-bxex+ 256))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-use-max-precision+ 512))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-use-space-as-eol+ 1024))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-honor-was-set-flags+ 2048))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-skip-bbox+ 4096))
(define-c-typedef pd-econtent-to-cos-obj-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecontent-ignore-marked-content+ 1))
(define-c-typedef pd-eenum-elements-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeget-fonts+ 0))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeget-xobjects+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeget-color-spaces+ 2))
(define-c-typedef pd-econtent-get-resource-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeset-cache-device+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeset-char-width+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeform-matrix+ 4))
(define-c-typedef pd-econtent-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-run+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-char+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-page-space+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-get-bounds+ 8))
(define-c-typedef pd-etext-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-fill+ 0))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-stroke+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-fill-and-stroke+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdetext-invisible+ 3))
(define-c-typedef pd-etext-render-mode :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdemove-to+ 0))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeline-to+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecurve-to+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecurve-to-v+ 3))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdecurve-to-y+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pderect+ 5))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeclose-path+ 6))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdepath-last-type+ 7))
(define-c-typedef pd-epath-element-type :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeinvisible+ 0))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdestroke+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefill+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +fill+ 3))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeeo-fill+ 4))
(define-c-typedef pd-epath-op-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-external+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-is-mask+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-interpolate+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-have-decode+ 8))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-is-indexed+ 16))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-masked-by-position+ 32))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-masked-by-color+ 64))
(define-c-typedef pd-eimage-attr-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-encoded-data+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-allow-delayed-read+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage16bpc-data+ 4))
(define-c-typedef pd-eimage-data-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeimage-convert16bpc-color-space+ 1))
(define-c-typedef pd-eimage-color-space-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdepsexternal+ 1))
(define-c-typedef pd-epsflags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeelement-copy-for-clip+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdeelement-copy-clipping+ 2))
(define-c-typedef pd-eelement-copy-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-embedded+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-will-subset+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-do-not-embed+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-encode-by-gid+ 8))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-defer-widths+ 16))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-subset+ +k-pdefont-will-subset+))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-gidoverride+ 32))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-to-unicode+ 64))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-all-widths+ 128))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-embed-open-type+ 256))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-reserved1+ 512))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-full-cidset+ 1024))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-throw-if-to-unicode-uses-pua+ 2048))
(define-c-typedef pd-efont-create-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-need-widths+ 65536))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-need-to-unicode+ 131072))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdefont-create-need-embed+ 262144))
(define-c-typedef pd-efont-create-need-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-unknown+ 0))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-type1+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-true-type+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-cid+ 3))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-atc+ 4))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-ocf+ 5))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-open-type-cff+ 6))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-open-type-cid+ 7))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdsys-font-open-type-tt+ 8))
(define-c-typedef pd-sys-font-package-type :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdesoft-mask-type-luminosity+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdesoft-mask-type-alpha+ 2))
(define-c-typedef pd-esoft-mask-create-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdexgroup-type-transparency+ 1))
(define-c-typedef pd-exgroup-create-flags :int)
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-win-east-european-roman+ 1250))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-win-cyrillic+ 1251))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-win-greek+ 1253))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-win-turkish+ 1254))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-win-hebrew+ 1255))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-win-arabic+ 1256))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-win-baltic+ 1257))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-central-european+ -9994))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-croatian+ -9993))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-romanian+ -9992))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-cyrillic+ -9991))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-ukrainian+ -9990))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-greek+ -9989))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-turkish+ -9988))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-hebrew+ -9987))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-pdcode-page-mac-arabic+ -9986))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-jpxcsunknown+ 0))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-jpxcsenumerated+ 1))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-jpxcsrestricted-icc+ 2))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-jpxcsany-icc+ 3))
(eval-when (:compile-toplevel :load-toplevel :execute)
  (defconstant +k-jpxcsvender-color+ 4))
(define-c-typedef jpxcolor-space-type :int)
(define-c-typedef pd-eelement-enum-proc
                  (:pointer
                   (:function
                    ((in pd-eelement) (:pointer (in :void)))
                    as-bool
                    :calling-convention
                    :cdecl)))
(define-c-typedef pd-eclip-enum-proc
                  (:pointer
                   (:function
                    ((in pd-eelement) (:pointer (in :void)))
                    as-bool
                    :calling-convention
                    :cdecl)))
(define-c-typedef pd-eobject-dump-proc
                  (:pointer
                   (:function
                    ((in pd-eobject)
                     (:pointer (in :byte))
                     (:pointer (in :void)))
                    :void
                    :calling-convention
                    :cdecl)))
(define-c-typedef pd-eattr-enum-proc
                  (:pointer
                   (:function
                    ((:pointer (in :void))
                     (in as-uns32)
                     (in as-uns16)
                     (:pointer (in :void)))
                    as-bool
                    :calling-convention
                    :cdecl)))
(define-c-struct pd-econtent-attrs
                 (flags as-uns32)
                 (cache-device (:c-array as-fixed 8))
                 (form-type as-int32)
                 (bbox as-fixed-rect)
                 (matrix as-fixed-matrix)
                 (xuid cos-obj))
(define-c-typedef pd-econtent-attrs-p (:pointer pd-econtent-attrs))
(define-c-struct pd-ecolor-value
                 (color (:c-array as-fixed 7))
                 (color-obj2 pd-eobject)
                 (color-obj pd-eobject))
(define-c-typedef pd-ecolor-value-p (:pointer pd-ecolor-value))
(define-c-struct pd-ecolor-spec
                 (space pd-ecolor-space)
                 (value pd-ecolor-value))
(define-c-typedef pd-ecolor-spec-p (:pointer pd-ecolor-spec))
(define-c-struct pd-edash
                 (dash-phase as-fixed)
                 (dash-len as-int32)
                 (dashes (:c-array as-fixed 11)))
(define-c-typedef pd-edash-p (:pointer pd-edash))
(define-c-struct pd-egraphic-state
                 (was-set-flags as-uns32)
                 (fill-color-spec pd-ecolor-spec)
                 (stroke-color-spec pd-ecolor-spec)
                 (dash pd-edash)
                 (line-width as-fixed)
                 (miter-limit as-fixed)
                 (flatness as-fixed)
                 (line-cap as-int32)
                 (line-join as-int32)
                 (render-intent as-atom)
                 (ext-gstate pd-eext-gstate)
                 (soft-mask-matrix as-fixed-matrix))
(define-c-typedef pd-egraphic-state-p (:pointer pd-egraphic-state))
(define-c-struct pd-etext-state
                 (was-set-flags as-uns32)
                 (char-spacing as-fixed)
                 (word-spacing as-fixed)
                 (render-mode as-int32)
                 (font-size as-fixed)
                 (h-scale as-fixed)
                 (text-rise as-fixed))
(define-c-typedef pd-etext-state-p (:pointer pd-etext-state))
(define-c-struct pd-efilter-spec
                 (flags as-uns32)
                 (width as-int32)
                 (height as-int32)
                 (bits-per-component as-int32)
                 (decode (:c-array as-fixed 8))
                 (intent as-atom)
                 (decode-parms cos-obj)
                 (encode-parms cos-obj)
                 (name as-atom)
                 (padding as-int16))
(define-c-typedef pd-efilter-spec-p (:pointer pd-efilter-spec))
(define-c-struct pd-efilter-array
                 (num-filters as-int32)
                 (spec (:c-array pd-efilter-spec 1)))
(define-c-typedef pd-efilter-array-p (:pointer pd-efilter-array))
(define-c-struct pd-epsattrs (flags as-uns32))
(define-c-typedef pd-epsattrs-p (:pointer pd-epsattrs))
(define-c-struct pd-efont-attrs
                 (name as-atom)
                 (type as-atom)
                 (char-set as-atom)
                 (encoding as-atom)
                 (flags as-uns32)
                 (font-bbox as-fixed-rect)
                 (missing-width as-int16)
                 (stem-v as-int16)
                 (stem-h as-int16)
                 (cap-height as-int16)
                 (x-height as-int16)
                 (ascent as-int16)
                 (descent as-int16)
                 (leading as-int16)
                 (max-width as-int16)
                 (avg-width as-int16)
                 (italic-angle as-int16)
                 (cid-font-type as-atom)
                 (w-mode as-int16)
                 (ps-name as-atom)
                 (platform-name as-atom)
                 (lang as-atom)
                 (registry as-atom)
                 (ordering as-atom)
                 (supplement as-int32)
                 (cant-embed as-int32)
                 (delta-encoding as-atom)
                 (protection as-uns32)
                 (package-type as-int32))
(define-c-typedef pd-efont-attrs-p (:pointer pd-efont-attrs))
(define-c-struct pd-efont-create-params-rec
                 (attrs-p pd-efont-attrs-p)
                 (attrs-size as-uns32)
                 (first-char as-int32)
                 (last-char as-int32)
                 (widths-p (:pointer as-int16))
                 (encoding-base-name as-atom)
                 (font-stm as-stm)
                 (len1 as-int32)
                 (len2 as-int32)
                 (len3 as-int32)
                 (has-dw as-bool)
                 (dw as-int32)
                 (w cos-obj)
                 (has-dw2 as-bool)
                 (dw2 (:c-array as-int32 2))
                 (w2 cos-obj)
                 (to-unicode-len as-int32)
                 (to-unicode-stm as-stm)
                 (cid-to-gid-map-stm as-stm)
                 (panose-no (:reference-pass :ef-mb-string))
                 (fd cos-obj)
                 (cid-set-stm as-stm)
                 (flags as-uns32)
                 (mm-design-vec (:pointer as-fixed))
                 (source-font-type as-atom))
(define-c-typedef pd-efont-create-params
                  (:pointer pd-efont-create-params-rec))
(define-c-struct pd-efont-create-from-sys-font-params-rec
                 (struct-size as-uns32)
                 (flags as-uns32)
                 (snapshot-name as-atom)
                 (mm-design-vec (:pointer as-fixed))
                 (ct-code-page :long)
                 (encoding as-atom)
                 (cos-doc cos-doc))
(define-c-typedef pd-efont-create-from-sys-font-params
                  (:pointer pd-efont-create-from-sys-font-params-rec))
(define-c-struct pd-eglyph-description
                 (glyph-id as-uns32)
                 (char-indices (:pointer as-int16))
                 (char-indices-len as-int32)
                 (x-position as-real)
                 (y-position as-real))
(define-c-typedef pd-eglyph-description-p
                  (:pointer pd-eglyph-description))
(define-c-struct pd-eglyph-run
                 (glyphs pd-eglyph-description-p)
                 (glyph-len as-int32)
                 (uni-text (:pointer as-utf32val))
                 (uni-text-len as-int32))
(define-c-typedef pd-eglyph-run-p (:pointer pd-eglyph-run))
(define-c-struct pd-espan-item
                 (first-glyph as-int32)
                 (n-glyphs as-int32)
                 (first-uni-char as-int32)
                 (n-uni-chars as-int32))
(define-c-typedef pd-espan-item-p (:pointer pd-espan-item))
(define-c-struct pd-espan-set
                 (spans pd-espan-item-p)
                 (span-count as-int32))
(define-c-typedef pd-espan-set-p (:pointer pd-espan-set))
(define-c-struct pd-ecolor-range-flt (min :float) (max :float))
(define-c-struct pd-exyzcolor-flt (x :float) (y :float) (z :float))
(define-c-struct pd-egray-cal-flt
                 (white-point pd-ewhite-point-flt)
                 (black-point pd-eblack-point-flt)
                 (gamma :float))
(define-c-struct pd-ergbcal-flt
                 (white-point pd-ewhite-point-flt)
                 (black-point pd-eblack-point-flt)
                 (red-gamma :float)
                 (green-gamma :float)
                 (blue-gamma :float)
                 (matrix (:c-array :float 9)))
(define-c-struct pd-elab-cal-flt
                 (white-point pd-ewhite-point-flt)
                 (black-point pd-eblack-point-flt)
                 (range-a pd-ecolor-range-flt)
                 (range-b pd-ecolor-range-flt))
(define-c-struct pd-eiccbased-color-data
                 (size as-size-t)
                 (iccstream as-stm)
                 (n-comps as-uns32)
                 (alt-cs pd-ecolor-space))
(define-c-struct pd-eindexed-color-data
                 (size as-size-t)
                 (base-cs pd-ecolor-space)
                 (hival as-uns16)
                 (lookup (:reference-pass :ef-mb-string))
                 (lookup-len as-uns32))
(define-c-struct pd-eseparation-color-data
                 (size as-size-t)
                 (name as-atom)
                 (alt pd-ecolor-space)
                 (tint-transform cos-obj))
(define-c-struct pd-edevice-ncolor-data
                 (size as-size-t)
                 (names (:pointer as-atom))
                 (n-names as-uns32)
                 (alt pd-ecolor-space)
                 (tint-transform cos-obj))
(define-c-struct pd-eimage-jpxattrs
                 (flags as-uns32)
                 (width as-int32)
                 (height as-int32)
                 (tile-width as-int32)
                 (tile-height as-int32)
                 (n-resolutions as-int32)
                 (n-components as-int32)
                 (bpc (:c-array as-int32 24))
                 (decode (:c-array as-fixed 24)))
(define-c-typedef pd-eimage-jpxattrs-p (:pointer pd-eimage-jpxattrs))
(define-c-struct jpxcsenum-attrs
                 (enum-number as-uns32)
                 (std-illuminant as-bool)
                 (illuminant as-uns32)
                 (lab-range (:c-array as-uns32 3))
                 (lab-offset (:c-array as-uns32 3)))
(define-c-typedef jpxcsenum-attrs-p (:pointer jpxcsenum-attrs))
